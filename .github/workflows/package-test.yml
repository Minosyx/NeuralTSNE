name: Test

on:
  workflow_call:
    inputs:
      release:
        type: boolean
        required: true
        description: "Whether to release the package"
      version:
        type: string
        required: true
        description: "Version of the package"

jobs:
  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      COVERAGE_DIR: _site
      MAIN_DIR: NeuralTSNE
      TAG_VERSION: ${{ inputs.version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]
    outputs:
      pytest-outcome: ${{ steps.pytest.outcome }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Update version
        run: |
          sed -i "s/{{VERSION}}/${TAG_VERSION}/g" $MAIN_DIR/NeuralTSNE/__init__.py
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install flake8 pytest pytest-cov pytest-html
      - name: Install package
        run: |
          pip install -e $MAIN_DIR/.
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        id: pytest
        continue-on-error: true
        run: |
          mkdir -p $COVERAGE_DIR/html_report
          pytest -c $MAIN_DIR/pyproject.toml --cov-config=$MAIN_DIR/.coveragerc --cov=$MAIN_DIR --cov-report=json:$COVERAGE_DIR/coverage.json --cov-report=html:$COVERAGE_DIR/coverage --html=$COVERAGE_DIR/html_report/report.html
      # - name: Create main index file
      #   run: |
      #      "<html><head><title>NeuralTSNE</title></head><body><h1>NeuralTSNE</h1><p>Test report: <a href=\"html_report/report.html\">report.html</a></p><p>Coverage report: <a href=\"coverage/index.html\">index.html</a></p><p>Coverage json: <a href=\"coverage.json\">coverage.json</a></p></body></html>" > $COVERAGE_DIR/index.html
      # - name: Fix permissions in coverage directory
      #   run: |
      #     chmod -c -R +rX "$COVERAGE_DIR/"
      # - name: Upload Github Pages artifact
      #   uses: actions/upload-pages-artifact@v3
      - name: Upload tests artifact
        uses: actions/upload-artifact@v4
        with:
          name: tests
          path: _site
          if-no-files-found: error

  generate_docs:
    needs: build
    runs-on: ubuntu-latest
    env:
      MAIN_DIR: NeuralTSNE
      PAGES_DIR: _site
      TAG_VERSION: ${{ inputs.version }}
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Download tests artifact
        uses: actions/download-artifact@v4
        with:
          name: tests
          path: ${{ github.workspace }}/_site
      - name: Update version
        run: |
          sed -i "s/{{VERSION}}/${TAG_VERSION}/g" $MAIN_DIR/NeuralTSNE/__init__.py
      - name: Install package
        run: |
          python -m pip install --upgrade pip
          pip install -e $MAIN_DIR/.
      - name: Install Sphinx
        run: |
          python -m pip install sphinx sphinx-rtd-theme
      - name: Sphinx build
        run: |
          mkdir ./$PAGES_DIR/docs
          sphinx-build -M html ./docs ./$PAGES_DIR/docs
      - name: Create main index file
        run: |
          echo "<html><head><title>NeuralTSNE</title></head><body><h1>NeuralTSNE</h1><p>Test report: <a href=\"html_report/report.html\">report.html</a></p><p>Coverage report: <a href=\"coverage/index.html\">index.html</a></p><p>Coverage json: <a href=\"coverage.json\">coverage.json</a></p><p>Documentation: <a href=\"docs/html/index.html\">index.html</a></p></body></html>" > $PAGES_DIR/index.html
      - name: Fix permissions in pages directory
        run: |
          chmod -c -R +rX "$PAGES_DIR/"
      - name: Upload Github Pages artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    needs: generate_docs

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Github Pages
        id: deployment
        uses: actions/deploy-pages@v4

  run_release:
    needs: build
    permissions:
      id-token: write
      contents: read

    if: needs.build.outputs.pytest-outcome == 'success' && inputs.release == true
    uses: ./.github/workflows/package-release.yml
    with:
      TAG_VERSION: ${{ inputs.version }}
