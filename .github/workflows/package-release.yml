# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    tags: ["v*.*.*"]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      COVERAGE_DIR: _site
      MAIN_DIR: NeuralTSNE
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11"]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Extract tag version
        id: tag
        run: |
          echo "TAG_VERSION=$(echo $GITHUB_REF | cut -d / -f 3)" >> $GITHUB_OUTPUT
      - name: Update version
        run: |
          sed -i "s/{{VERSION}}/${{ steps.tag.outputs.TAG_VERSION }}/g" $MAIN_DIR/NeuralTSNE/__init__.py
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel build
        # python -m pip install flake8 pytest pytest-cov pytest-html
      - name: Build and install package
        run: |
          python -m build $MAIN_DIR/. --sdist --wheel --outdir $MAIN_DIR/packaged
        # pip install -e $MAIN_DIR/.
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # - name: Test with pytest
      #   run: |
      #     mkdir -p $COVERAGE_DIR/html_report
      #     pytest -c $MAIN_DIR/pyproject.toml --cov=$MAIN_DIR --cov-report=json:$COVERAGE_DIR/coverage.json --cov-report=html:$COVERAGE_DIR/coverage --html=$COVERAGE_DIR/html_report/report.html
      - name: Print package files
        run: |
          ls -l $MAIN_DIR/packaged
          pwd
      - name: Upload built artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: WIP_NeuralTSNE/$MAIN_DIR/packaged
          if-no-files-found: error

  publish:
    needs: build
    if: success()
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - name: Download built artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          packages-dir: packaged/
